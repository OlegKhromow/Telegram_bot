import datetime

import telebot
from simpful import *

bot = telebot.TeleBot("YOUR_TOKEN")

# –æ–±'—î–∫—Ç –Ω–µ—á—ñ—Ç–∫–æ—ó –ª–æ–≥—ñ–∫–∏
FS = FuzzySystem()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–≤
cur_year = datetime.date.today().year
manufacture_year_very_old = FuzzySet(function=Trapezoidal_MF(1932, 1942, (cur_year - 52), (cur_year - 32)),
                                     term="very_old")
manufacture_year_old = FuzzySet(
    function=Trapezoidal_MF((cur_year - 49), (cur_year - 39), (cur_year - 29), (cur_year - 19)), term="old")
manufacture_year_almost_new = FuzzySet(
    function=Trapezoidal_MF((cur_year - 28), (cur_year - 17), (cur_year - 9), (cur_year - 2)), term="almost_new")
manufacture_year_new = FuzzySet(function=Triangular_MF((cur_year - 4), cur_year, (cur_year + 4)), term="new")
FS.add_linguistic_variable("manufacture_year", LinguisticVariable([manufacture_year_very_old,
                                                                   manufacture_year_old,
                                                                   manufacture_year_almost_new,
                                                                   manufacture_year_new],
                                                                  universe_of_discourse=[1950, cur_year]), verbose=True)

car_mileage_normal = FuzzySet(function=Trapezoidal_MF(a=-73980, b=-11110, c=73330, d=117500), term="normal")
car_mileage_average = FuzzySet(function=Trapezoidal_MF(50000, 100000, 150000, 176300), term="average")
car_mileage_high = FuzzySet(function=Trapezoidal_MF(150000, 200000, 500000, 530000), term="high")
FS.add_linguistic_variable("car_mileage",
                           LinguisticVariable([car_mileage_normal, car_mileage_average, car_mileage_high],
                                              universe_of_discourse=[0, 300000]), verbose=True)

technical_condition_bad = FuzzySet(function=Gaussian_MF(mu=0, sigma=1.77), term="bad")
technical_condition_normal = FuzzySet(function=Gaussian_MF(5, 1.77), term="normal")
technical_condition_good = FuzzySet(function=Gaussian_MF(10, 1.77), term="good")
FS.add_linguistic_variable("technical_condition", LinguisticVariable(
    [technical_condition_bad, technical_condition_normal, technical_condition_good], universe_of_discourse=[0, 10]),
                           verbose=True)

price_cheap = FuzzySet(function=Trapezoidal_MF(-70930, 0, 8000, 30000), term="cheap")
price_average = FuzzySet(function=Trapezoidal_MF(20000, 40000, 70000, 100000), term="average")
price_average_expensive = FuzzySet(function=Trapezoidal_MF(60000, 100000, 130000, 160000), term="average_expensive")
price_expensive = FuzzySet(function=Trapezoidal_MF(100000, 160000, 300000, 400000), term="expensive")
FS.add_linguistic_variable("price",
                           LinguisticVariable([price_cheap, price_average, price_average_expensive, price_expensive],
                                              universe_of_discourse=[500, 200000]), verbose=True)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ç–µ—Ä–º—É
recommendation_negative = FuzzySet(function=Trapezoidal_MF(-4.12, -0.458, 1.66279069767442, 4.12), term="negative")
recommendation_average = FuzzySet(function=Trapezoidal_MF(2.06, 4.56, 6.15374677002584, 8.46), term="average")
recommendation_positive = FuzzySet(function=Trapezoidal_MF(6.88, 8.9108527131783, 11, 15.1), term="positive")
FS.add_linguistic_variable("recommendation", LinguisticVariable(
    [recommendation_negative, recommendation_average, recommendation_positive], universe_of_discourse=[0, 10]),
                           verbose=True)

# –ó–∞–Ω–µ—Å–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª
FS.add_rules_from_file(path='rules.txt')


@bot.message_handler(commands=['help', 'start'])
def info_msg(message):
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é!üëã\n"
                                      "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –ø–æ–∫—É–ø–∫–æ—é –∞–≤—Ç–æ. "
                                      "–ü—Ä–æ—Å—Ç–æ –ø–æ—á–Ω—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /run.\n"
                                      "–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ "
                                      "–ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω–∏ ü§ñüöó")


@bot.message_handler(commands=['run'])
def run_quiz(message):
    bot.send_message(message.from_user.id, "–ü–æ—á–∏–Ω–∞—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.\n"
                                           "–ù–∞–ø–∏—à—ñ—Ç—å /exit —â–æ–± –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.\n\n"
                                           "–Ø–∫–∏–π —Ä—ñ–∫ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è?")
    bot.register_next_step_handler(message, get_manufacture_year)


def get_manufacture_year(message):
    if message.text.lower() == '/exit':
        bot.send_message(message.chat.id, "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ")
        return
    global manufacture_year
    try:
        manufacture_year = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü–∏—Ñ—Ä–∞", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_manufacture_year)
        return
    if manufacture_year < 1950 or manufacture_year > cur_year:
        bot.send_message(message.chat.id, "Ô∏è‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–†—ñ–∫ –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 1950 —Ç–∞ " + str(cur_year), parse_mode='Markdown')
        bot.register_next_step_handler(message, get_manufacture_year)
        return
    bot.send_message(message.chat.id, "–Ø–∫–∏–π –ø—Ä–æ–±—ñ–≥ —É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è? (–∫–º)")
    bot.register_next_step_handler(message, get_car_mileage)


def get_car_mileage(message):
    if message.text.lower() == '/exit':
        bot.send_message(message.chat.id, "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ")
        return
    global car_mileage
    try:
        car_mileage = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü–∏—Ñ—Ä–∞", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_car_mileage)
        return
    if car_mileage < 0 or car_mileage > 300000:
        bot.send_message(message.chat.id, "Ô∏è‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–ü—Ä–æ–±—ñ–≥ –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 0 –∫–º —Ç–∞ 300 —Ç–∏—Å. –∫–º", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_car_mileage)
        return
    bot.send_message(message.chat.id, "–û—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥ 0 –¥–æ 10 —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º –æ–≥–ª—è–¥–æ–º (–Ω–∞—è–≤–Ω—ñ—Å—Ç—å "
                                      "–ø–æ–¥—Ä—è–ø–∏–Ω, –≤–∏–¥–∏–º–∏—Ö –æ–∑–Ω–∞–∫ —É—á–∞—Å—Ç—ñ –≤ –î–¢–ü, —ñ—Ä–∂–∞, —Ç–æ—â–æ.)\n"
                                      "`0 - –±–∞–≥–∞—Ç–æ –Ω–µ–¥–æ–ª—ñ–∫—ñ–≤\n"
                                      "10 - –≤ —ñ–¥–µ–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ`", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_technical_condition)


def get_technical_condition(message):
    if message.text.lower() == '/exit':
        bot.send_message(message.chat.id, "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ")
        return
    global technical_condition
    try:
        technical_condition = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü–∏—Ñ—Ä–∞", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_technical_condition)
        return
    if technical_condition < 0 or technical_condition > 10:
        bot.send_message(message.chat.id, "Ô∏è‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 0 —Ç–∞ 10", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_technical_condition)
        return
    bot.send_message(message.chat.id, "–Ø–∫–∞ —Ü—ñ–Ω–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –≤ –¥–æ–ª–∞—Ä–∞—Ö? ($)")
    bot.register_next_step_handler(message, get_price)


def get_price(message):
    if message.text.lower() == '/exit':
        bot.send_message(message.chat.id, "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ")
        return
    global price
    try:
        price = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü–∏—Ñ—Ä–∞", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_price)
        return
    if price < 500 or price > 200000:
        bot.send_message(message.chat.id, "Ô∏è‚ÄºÔ∏è*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*‚ÄºÔ∏è\n"
                                          "–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 500 $ —Ç–∞ 200—Ç–∏—Å. $", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_price)
        return
    give_recommendation(message)


def give_recommendation(message):
    bot.send_message(message.chat.id, "_" + message.chat.first_name + ", –≤–∞—à—ñ –¥–∞–Ω—ñ_\n–†—ñ–∫ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è: `" + str(
        manufacture_year) + "`\n–ü—Ä–æ–±—ñ–≥ "
                            "–∞–≤—Ç–æ–º–æ–±—ñ–ª—è: `" +
                     str(car_mileage) + " –∫–º`\n–¢–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω: `" + str(technical_condition) + "`\n–¶—ñ–Ω–∞: `" + str(price)
                     + " $`", parse_mode='Markdown')
    variables = ["manufacture_year", "car_mileage", "technical_condition", "price"]
    values = [manufacture_year, car_mileage, technical_condition, price]
    for variable, value in zip(variables, values):
        FS.set_variable(variable, value)
    mamdani = FS.Mamdani_inference()
    bot.send_message(message.chat.id, "*–ü–æ—Ä–∞–¥–∞*\n" + get_recommendation(mamdani.get("recommendation")), parse_mode='Markdown')
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º. –†–∞–¥—ñ —è–∫—â–æ –∑–º–æ–≥–ª–∏ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏üòÅ\n–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—É –ø–æ—Ä–∞–¥—É –≤–≤–µ–¥—ñ—Ç—å /run")


def get_recommendation(coef):
    if 0 <= coef < 3.3:
        return "üî¥ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å –Ω–µ –≤–∞—Ä—Ç–∏–π —É–≤–∞–≥–∏, –ø–æ—à—É–∫–∞–π—Ç–µ —â–æ—Å—å –∫—Ä–∞—â–µ."
    elif 3.3 <= coef < 6.6:
        return "üü° –ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É –≥–∞—Ä–Ω–æ–º—É —Å—Ç–∞–Ω—ñ, –∞–ª–µ –º–∞—î —Å–≤–æ—ó –Ω–µ–¥–æ–ª—ñ–∫–∏. –Ø–∫—â–æ –≤–∞—Å –≤—Å–µ –≤–ª–∞—à—Ç–æ–≤—É—î —Ç–æ –∫—É–ø—É–π—Ç–µ üòÖ"
    elif 6.6 <= coef <= 10:
        return "üü¢ –ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ê–≤—Ç–æ –≤ —ñ–¥–µ–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –ö—É–ø—É–π—Ç–µ - –Ω–µ –ø–æ—à–∫–æ–¥—É—î—Ç–µ üòé"


@bot.message_handler(commands=['exit'])
@bot.message_handler(func = lambda msg: msg.text is not None and '/' not in msg.text)
def query_handler(message):
    bot.send_message(message.chat.id, "–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ö–∞–Ω–Ω—èü§∑‚Äç‚ôÇÔ∏è")
    info_msg(message)


bot.infinity_polling()
